
import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class BaristaFlow extends Simulation {

	val httpProtocol = http
		.baseURL("http://localhost:8080")
		.acceptHeader("*/*")
		.acceptEncodingHeader("gzip, deflate")
		.acceptLanguageHeader("en-US,en;q=0.5")
		.userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0")

	val headers_0 = Map(
		"Accept" -> "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
		"Upgrade-Insecure-Requests" -> "1")

	val headers_4 = Map("Content-type" -> "application/json; charset=UTF-8")

	val initSyncAndClientIds = exec((session) => {
		session.setAll(
			"syncId" -> 0,
			"clientId" -> 0
		)
	})

	val url = "/"
	val uidlUrl = url + "?v-r=uidl&v-uiId=${uiId}"

	val uIdExtract = regex(""""v-uiId":(\d+)""").saveAs("uiId")
	val syncIdExtract = regex("""syncId":([0-9]*)""").saveAs("syncId")
	val clientIdExtract = regex("""clientId":([0-9]*)""").saveAs("clientId")
	val xsrfTokenExtract = regex("""Vaadin-Security-Key":\s?"([^"]*)""").saveAs("seckey")

	// Storefront from initial response
	val appIdExtract        =  regex("""node":(\d+),+"type":"splice",+"feat":[0-9]*,+"index":[0-9]*,+"add":\[+"desktopView"""").saveAs("appId")
	val gridIdExtract       =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"storefront-grid"""").saveAs("gridId")
	val dueDate0IdExtract    =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"due-date"""").saveAs("dueDateId")
	val newButtonIdExtract  =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"action"""").saveAs("newButtonId")
	val customerIdExtract   =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"customer-name"""").saveAs("customerId")
	val phoneIdExtract      =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"customer-number"""").saveAs("phoneId")
	val reviewIdExtract     =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"review"""").saveAs("reviewId")
	val saveIdExtract       =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"save"""").saveAs("saveId")
	val saveStoreExtract    =  regex("""node":(\d+),+"type":"put",+"key":"payload",+"feat":[0-9]*,+"value":\{+"type":"@id",+"payload":"pickup-location"""").saveAs("storeId")

	// Order dialog
	val statusIdExtract    = regex("""node":(\d+),"type":"put","key":"value","feat":[0-9]*,"value":"New"""").saveAs("statusId")
	val dueTimeIdExtract   = regex("""node":(\d+),"type":"put","key":"value","feat":[0-9]*,"value":"4:00\sp.m."""").saveAs("dueTimeId")
	val dueDateIdExtract   = regex("""node":(\d+),"type":"put","key":"value","feat":[0-9]*,"value":"2018-[0-9]{2}-[0-9]{2}"""").saveAs("dueDateId")
	val amountIdExtract    = regex("""node":(\d+),"type":"put","key":"tag","feat":[0-9]*,"value":"amount-field"}""").saveAs("amountId")
	val productsIdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"products"\}""").saveAs("productsId")

	val amount2IdExtract   = regex("""node":(\d+),"type":"put","key":"tag","feat":[0-9]*,"value":"amount-field"}""").saveAs("amount2Id")
	val products2IdExtract = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"products"\}""").saveAs("products2Id")
	val amount3IdExtract   = regex("""node":(\d+),"type":"put","key":"tag","feat":[0-9]*,"value":"amount-field"}""").saveAs("amount3Id")

  	// Dahshboard
	val grid2IdExtract   = regex("""node":(\d+),"type":"put","key":"tag","feat":[0-9]*,"value":"vaadin-grid"""").saveAs("grid2Id")
	val chart1IdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"today-count-chart"""").saveAs("chart1Id")
	val chart2IdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"monthly-product-split"""").saveAs("chart2Id")
	val chart3IdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"yearly-sales-graph"""").saveAs("chart3Id")
	val chart4IdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"deliveries-this-year"""").saveAs("chart4Id")
	val chart5IdExtract  = regex("""node":(\d+),"type":"put","key":"payload","feat":[0-9]*,"value":\{"type":"@id","payload":"deliveries-this-month"""").saveAs("chart5Id")

	val scn = scenario("BaristaNEW3")
		.exec(http("Initial request")
      .get(url)
			.headers(headers_0)
			.check(xsrfTokenExtract)
      )
    .exec(initSyncAndClientIds)
		.pause(8,11)

		.exec(http("Login")
			.post("/login")
			.headers(headers_0)
			.formParam("username", "barista@vaadin.com")
			.formParam("password", "barista")
			.formParam("prefix", "undefined")
			.formParam("suffix", "undefined")
			.check(appIdExtract)
			.check(gridIdExtract)
			.check(dueDate0IdExtract)
			.check(newButtonIdExtract)
			.check(customerIdExtract)
			.check(phoneIdExtract)
			.check(reviewIdExtract)
			.check(saveIdExtract)
			.check(uIdExtract)
			.check(saveStoreExtract)
			.check(syncIdExtract).check(clientIdExtract)
		)
		.pause(2)

		.exec(http("First xhr, init grid")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0004_request.txt"))
			.check(syncIdExtract).check(clientIdExtract))
		.pause(4,10)

//		.pause(2)
//		.exec(http("Initialize things")
//			.post(uidlUrl)
//			.headers(headers_4)
//			.body(ElFileBody("BaristaNEW3_0005_request.txt"))
//			.check(syncIdExtract).check(clientIdExtract))

		.exec(http("Click new order")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0009_request.txt"))
			.check(syncIdExtract).check(clientIdExtract)
			.check(statusIdExtract)
			.check(dueTimeIdExtract)
			.check(amountIdExtract)
			.check(productsIdExtract)
			.check(amount2IdExtract)
			.check(products2IdExtract)
			.check(amount3IdExtract)
			.check(dueDateIdExtract)
		)
		.pause(5)

		.exec(http("Selection changes")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0010_request.txt"))
			.check(syncIdExtract).check(clientIdExtract))
		.pause(2)

		.exec(http("Customer name")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0027_request.txt"))
			.check(syncIdExtract).check(clientIdExtract))
		.pause(5,6)

		.exec(http("Phone number")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0036_request.txt"))
			.check(syncIdExtract).check(clientIdExtract))
		.pause(5,6)

    .exec(http("Product CB1 opened")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0037_a_request.txt"))
      .check(syncIdExtract).check(clientIdExtract))
    .pause(4,6)
    .exec(http("Select product")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0037_request.txt"))
      .check(syncIdExtract).check(clientIdExtract)
      .check(amount2IdExtract)
      .check(products2IdExtract)
    )
    .pause(2)
    .exec(http("Product CB1 closed")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0037b_request.txt"))
      .check(syncIdExtract).check(clientIdExtract))
		.pause(2)

    .exec(http("Product CB2 opened")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0038_a_request.txt"))
      .check(syncIdExtract).check(clientIdExtract))
    .pause(5,7)
    .exec(http("Select 2. product")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0038_request.txt"))
      .check(syncIdExtract).check(clientIdExtract)
      .check(amount3IdExtract)
    )
    .pause(2)
    .exec(http("Product CB2 closed")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0038b_request.txt"))
      .check(syncIdExtract).check(clientIdExtract))
		.pause(5,7)

    .exec(http("Select Store opened")
      .post(uidlUrl)
      .headers(headers_4)
      .body(ElFileBody("BaristaNEW3_0043_a_request.txt"))
      .check(syncIdExtract).check(clientIdExtract))
    .pause(2)
		.exec(http("Select Store selected and closed")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0043_request.txt"))
			.check(syncIdExtract).check(clientIdExtract))
		.pause(2)
		.exec(http("Click review order")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0044_request.txt"))
			.check(syncIdExtract).check(clientIdExtract)
			.check(regex("""Order placed"""))
		)
		.pause(2)
		.exec(http("Click place order")
			.post(uidlUrl)
			.headers(headers_4)
			.body(ElFileBody("BaristaNEW3_0045_request.txt"))
			.check(syncIdExtract).check(clientIdExtract)
			.check(regex("""order-card"""))
		)
		.pause(2,6)

//		.pause(1)
//		.exec(http("Update view")
//			.post(uidlUrl)
//			.headers(headers_4)
//			.body(ElFileBody("BaristaNEW3_0046_request.txt"))
//			.check(syncIdExtract).check(clientIdExtract))
//		.pause(5,8)
//
//		.exec(http("Navigate to dashboard")
//			.post(uidlUrl)
//			.headers(headers_4)
//			.body(ElFileBody("BaristaNEW3_0047_request.txt"))
//			.check(syncIdExtract).check(clientIdExtract)
//			.check(grid2IdExtract)
//			.check(chart1IdExtract)
//			.check(chart2IdExtract)
//			.check(chart3IdExtract)
//			.check(chart4IdExtract)
//			.check(chart5IdExtract)
//		)
//		.pause(2)
//		.exec(http("Load grid and charts")
//			.post(uidlUrl)
//			.headers(headers_4)
//			.body(ElFileBody("BaristaNEW3_0048_request.txt"))
//			.check(syncIdExtract).check(clientIdExtract))
//		.pause(2)
//		.exec(http("Update grid")
//			.post(uidlUrl)
//			.headers(headers_4)
//			.body(ElFileBody("BaristaNEW3_0049_request.txt"))
//			.check(syncIdExtract).check(clientIdExtract))
//		.pause(6)

	setUp(scn.inject(rampUsers(1000) over (270))).protocols(httpProtocol)
}