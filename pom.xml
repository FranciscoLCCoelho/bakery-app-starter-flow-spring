<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.vaadin.flow.demo</groupId>
    <artifactId>bakery-app-starter-flow-spring</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.4.RELEASE</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <failOnMissingWebXml>false</failOnMissingWebXml>
        <!-- Dependencies -->
        <flow.version>0.1-SNAPSHOT</flow.version>
        <testbench.version>5.0.0</testbench.version>

        <!-- Plugins -->
        <frontend.maven.plugin.version>1.3</frontend.maven.plugin.version>
        <jetty.version>9.3.7.v20160115</jetty.version>
        <driver.binary.downloader.maven.plugin.version>1.0.11</driver.binary.downloader.maven.plugin.version>
        <maven.failsafe.plugin.version>2.19.1</maven.failsafe.plugin.version>
        <maven.war.plugin.version>3.0.0</maven.war.plugin.version>
        <maven.resources.plugin.version>3.0.2</maven.resources.plugin.version>
        <maven.clean.plugin.version>3.0.0</maven.clean.plugin.version>

        <!-- Frontend -->
        <node.version>v8.1.2</node.version>
        <npm.version>5.0.4</npm.version>
        <frontend.working.directory>src/main/frontend</frontend.working.directory>
        <vaadin.frontend.path>VAADIN/static/frontend</vaadin.frontend.path>
    </properties>

    <repositories>
        <repository>
            <id>flow-internal-release</id>
            <url>https://repo.vaadin.com/nexus/content/repositories/flow</url>
        </repository>

        <repository>
            <id>flow-internal-snapshots</id>
            <url>https://repo.vaadin.com/nexus/content/repositories/flow-snapshots/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>

        <repository>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <id>repo-vaadin-com-snapshots</id>
            <url>https://repo.vaadin.com/nexus/content/repositories/website-snapshots/</url>
        </repository>

        <repository>
            <id>vaadin-addons</id>
            <url>http://maven.vaadin.com/vaadin-addons</url>
        </repository>
        
    </repositories>

    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>
        <!-- Vaadin Flow -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow</artifactId>
            <version>${flow.version}</version>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>hummingbird-ext</artifactId>
            <version>4.0.0-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <groupId>com.vaadin</groupId>
                    <artifactId>flow</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- End of Vaadin Flow -->
        <!-- Spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>tomcat-juli</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- End Spring -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>com.thedeanda</groupId>
            <artifactId>lorem</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-testbench-core</artifactId>
            <version>5.1.0.alpha1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <!-- The `pluginManagement` section allows listing plugin versions and other global
             configuration in one place. -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven.war.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>${frontend.maven.plugin.version}</version>
                    <configuration>
                        <nodeVersion>${node.version}</nodeVersion>
                        <npmVersion>${npm.version}</npmVersion>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- (1): Configures the cleanup process for JS dependencies and build -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${frontend.working.directory}/bower_components</directory>
                        </fileset>
                        <fileset>
                            <directory>${frontend.working.directory}/build</directory>
                        </fileset>
                        <fileset>
                            <directory>${frontend.working.directory}/etc</directory>
                        </fileset>
                        <fileset>
                            <directory>${frontend.working.directory}/node</directory>
                        </fileset>
                        <fileset>
                            <directory>${frontend.working.directory}/node_modules</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- (3): Configures the Jetty plugin to use the right resource path when running in
                      either production or debug modes -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <scanIntervalSeconds>-1</scanIntervalSeconds>
                    <stopPort>8081</stopPort>
                    <stopWait>5</stopWait>
                    <stopKey>foo</stopKey>
                    <!-- Prevent Jetty from scanning the classpath. -->
                    <!-- Speeds up startup time significantly -->
                    <webAppConfig>
                        <webInfIncludeJarPattern>.*/flow-.*.jar$|.*/test-resources-.*.jar$</webInfIncludeJarPattern>
                        <containerIncludeJarPattern>^$</containerIncludeJarPattern>
                        <resourceBases>
                            <resourceBase>${frontend.working.directory}</resourceBase>
                            <resourceBase>${frontend.working.directory}/resources</resourceBase>
                            <resourceBase>${jetty.extra.resource.base}</resourceBase>
                        </resourceBases>
                    </webAppConfig>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>lint</id>
            <activation>
                <property>
                    <name>!skipTests</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>npm run lint</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <arguments>run lint</arguments>
                                    <workingDirectory>${frontend.working.directory}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
        <profile>
            <id>production</id>
            <activation>
                <property>
                    <name>vaadin.productionMode</name>
                </property>
            </activation>

            <properties>
                <npm.build.goal>run build</npm.build.goal>
                <jetty.extra.resource.base>${project.build.directory}/jetty-extra-resources</jetty.extra.resource.base>
            </properties>


            <!-- (4): Makes the package run in production mode when deployed, without the need of setting extra
                      properties on the server -->
            <dependencies>
                <dependency>
                    <groupId>com.vaadin</groupId>
                    <artifactId>flow-server-production-mode</artifactId>
                    <version>${flow.version}</version>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <!-- (5): Copies the files compiled by polymer-build to a directory from where they can be
                              served when in production mode (root of the WAR) -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <webResources>
                                <resource>
                                    <directory>${frontend.working.directory}/build</directory>
                                    <targetPath>${vaadin.frontend.path}</targetPath>
                                </resource>
                                <resource>
                                    <directory>${frontend.working.directory}/resources</directory>
                                    <targetPath>/</targetPath>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>

                    <!-- (6): Copies the files compiled by polymer-build to a directory which jetty:run can use
                              as resource folder -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${jetty.extra.resource.base}/${vaadin.frontend.path}</outputDirectory>
                                    <overwrite>true</overwrite>
                                    <resources>
                                        <resource>
                                            <directory>${frontend.working.directory}/build</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>

                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>development</id>
            <activation>
                <property>
                    <name>!vaadin.productionMode</name>
                </property>
            </activation>

            <properties>
                <npm.build.goal>run skip-build</npm.build.goal>
                <jetty.extra.resource.base>${frontend.working.directory}</jetty.extra.resource.base>
            </properties>

            <build>
                <plugins>
                    <!-- (7): Adds the files from src/main/frontend directly into the WAR when in development mode -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <webResources>
                                <resource>
                                    <directory>${frontend.working.directory}</directory>
                                    <excludes>
                                        <exclude>build/**</exclude>
                                        <exclude>node/**</exclude>
                                        <exclude>node_modules/**</exclude>
                                        <exclude>etc/**</exclude>
                                    </excludes>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- When running mvn with `-DskipFrontendBuild`, all frontend-related build steps are skipped:
             - npm install
             - bower install
             - polymer build

             This is handy when the app is restarted without any changes to frontend resources. -->
        <profile>
            <id>frontend-build</id>
            <activation>
                <property>
                    <name>!skipFrontendBuild</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- (2): Configures the frontend plugin to compile the web components source -->
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-node-and-npm</id>
                                <goals>
                                    <goal>install-node-and-npm</goal>
                                    <goal>npm</goal> <!-- runs 'install' by default -->
                                </goals>
                                <configuration>
                                    <workingDirectory>${frontend.working.directory}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>run-polymer-build</id>
                                <goals>
                                    <goal>npm</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${frontend.working.directory}</workingDirectory>
                                    <arguments>${npm.build.goal}</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Moving jetty start/stop into a separate profile speeds up regular builds.
             Execute mvn verify -Pit to run integration tests -->
        <profile>
            <id>it</id>
            <activation>
                <property>
                    <name>it</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-jetty-for-itest</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-jetty-after-itest</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.19.1</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <trimStackTrace>false</trimStackTrace>
                            <systemPropertyVariables>
                                <webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <!-- Plugin for automatically download Chrome Driver for tests -->
                    <plugin>
                        <groupId>com.lazerycode.selenium</groupId>
                        <artifactId>driver-binary-downloader-maven-plugin</artifactId>
                        <version>1.0.12</version>
                        <configuration>
                            <!-- root directory that downloaded driver binaries will be stored
                                in -->
                            <onlyGetDriversForHostOperatingSystem>true</onlyGetDriversForHostOperatingSystem>
                            <rootStandaloneServerDirectory>.driver</rootStandaloneServerDirectory>
                            <customRepositoryMap>webdrivers.xml</customRepositoryMap>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>selenium</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>
</project>
